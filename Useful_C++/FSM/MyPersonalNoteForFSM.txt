1. Make a state transition table
	It is good mechanism for organizing states and affecting state transitions.
	Description :
		The table can be queried by an agent at regular intervals, enabling it to make any necessary state transitions based on the stimulus it receives from the game environment.
		Each state can be modeled as a separate object or function existing external to the agent, providing a clean and flexible architecture.


	Example Table :
		Current State		Condition							State Transition
		Runaway				Safe								Patrol
		Attack				WeakerThanEnemy						RunAway
		Patrol				Threatened && StrongerThanEnemy		Attack
		Patrol				Threatened && WeakerThanEnemy		RunAway


2. List states
	It seems good to describe states followed by a description of the actions and state transitions that occur within those states.

		Example:
			EnterMinAndDigForNugget:
				If the miner is not located at the gold mine, he changes location.
				If already at the gold mine, he digs for nuggets of gold.
				When his pockets are full, Bob changes state to *VisitBankAndDepositGold*, and if while digging he finds himself thirsty, he will stop and change state to QuenchThirst.
			.... more example can be found in the book *Programming Gama Ai By Example*.
	However, sometimes it's hard to follow the flow of the state logic from reading a text description like this, so it's often helpful to pick up pen and paper and draw a state transition diagram for your game agents.

	Rule in the book:
		The bubbles represent the individual states and the lines between them the available transitions.


3. Should each concrete state is implemented as a singleton object?
	The book encourage it to makes the design more efficient because they remove the need to allocate and deallocate memory every time a state change is made.
	Professor Kevin said that it is not inappropriate place to use singleton pattern.
	Furthrmore, he said that there is a bunch of version of FSM. Do not need to persist on its description, which means the architecture is up to me.
	
	My result is..
		I'm going to think about it again later to find mine FSM.


4. Making the state base class reusable
	As the design stands, it's necessary to create a separate *State* base class for each character type to derive its states from.
	Instread, let's make it resuable by turning t into a class template.

	Actually, make state class templated class is really good but not my idea.
	I need more effort to easily pop a nice way with template to deal with problems.

5. Global States & State Blip

	(Global State)
	you will end up with code that is duplicated in every state.
		-> Global State

	(State Blip)
	Sometimes the player do something sudden things and back to job what he did before sudden things.
	For example, work -> urination -> work | tweet -> urination -> tweet
	It is reffered as State Blip phenomenon and we need global states to back to previous state.

	State* currentState;
	State* previousState;
	State* globalState;

	However, it seems dirty and we need time to tidy up a little...

	I think the solution is a *State Machine* class

-------------------------------------------------------------------------------------------------------------------------------------------
Finite State Machine With Message System
-------------------------------------------------------------------------------------------------------------------------------------------

6. The advantage when we add message system to our FSM.

	These situations become easy to deal with
		A wizard throws a fireball at an orc.
		A football player makes a pass to a teammate.
		A grunt is injured.
		A character strikes a match to help light its way along a gloomycorridor.

7. The telegram structures

	What informations need to be dispatched..
		Who sent it								->					int Sender
		Who the recipient is					->					int Receiver
		What the actual message is		->					int Msg
		A time stamp								->					double DispatchTime
		etc..											->					void* ExtraInfo

	The *Telegram* structure should be reusable.
	That's the reason why ExtraInfo exist,
		For example, if a platoon leader sends the message Msg_MoveToPosition to all his men,
		ExtraInfo can be used to store the coordinates of that position.
			(		ExtraInfo = reinterpret_cast<void*>(destinationCoordinate);		)

8. Message Dispatch & Management
	A class named MessageDispatcher is a easy way to deal with.
	
	1. Entity Manager

		There are methods such as
			void RegisterEntity(BaseGameEntity*)
			BaseGameEntity* GetEntityFromId(int) const

		They are implemented for faster access.
		It is the fact that enumerated value is faster to calculate.
		However, since my JamJam Engine does not labeled ID value to all of objects, there are a bunch of extra tasks to apply it.
		I need a discussion about it.
		(Maybe extra reference about Message System help to determine the architecture of Message Dispatcher)

	2. Message Dispatcher
		It manage all messages
			When they routed, message dispatcher manage it.


	Changes..
		In order to support message by State Machine, a bunch of files need to support a few of extra functionalities.

		The ancestor class of game entity have to support the function when message received.
			For instance, 
				virtual bool HandleMessage(const Telegram& msg) = 0;

		The abstract State class have to declare OnMessage function as a pure virtual function
		The StateMachine also have it.
			In example of StateMachine, there is a hierachy between global state and current state.